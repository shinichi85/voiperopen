; Copyright (C) 2004 Coalescent Systems Inc
; Copyright (C) 2005-2008 SpheraIT

; dialparties.agi (http://www.sprackett.com/asterisk/)
; Asterisk::AGI (http://asterisk.gnuinter.net/)
; gsm (http://www.ibiblio.org/pub/Linux/utils/compress/!INDEX.short.html)
; markit italian sounds.
; madplay (http://voip-info.org/wiki-Asterisk+config+musiconhold.conf)

#include extensions_additional_a2billing.conf
#include extensions_additional.conf
#include extensions_custom.conf
#include extensions_custom_speeddial.conf
#include extensions_tone.conf
#include extensions_time.conf
#include extensions_cti.conf

[general]
autofallthrough = no
priorityjumping = yes

[globals]
DYNAMIC_FEATURES => automon

[from-trunk]                                                                        ; just an alias since VoIP shouldn't be called PSTN
include => from-pstn
[from-trunk-1]
include => from-pstn-1
[from-trunk-2]
include => from-pstn-2
[from-trunk-3]
include => from-pstn-3
[from-trunk-4]
include => from-pstn-4
[from-trunk-5]
include => from-pstn-5

; ############################################################################
; Macros [macro]
; ############################################################################

; Rings one or more extensions.  Handles things like call forwarding and DND
; We don't call dial directly for anything internal anymore.
; ARGS: $TIMER, $OPTIONS, $EXT1, $EXT2, $EXT3, ...
; Use a Macro call such as the following:
;  Macro(dial,$DIAL_TIMER,$DIAL_OPTIONS,$EXT1,$EXT2,$EXT3,...)
[macro-dial]
exten => s,1,GotoIf($["${MACRO_CONTEXT}" = "macro-rg-group"]?4:2)                       ; if this is from rg-group, don't strip prefix
exten => s,2,GotoIf($["${CALLERID(name):0:${LEN(${RGPREFIX})}}" != "${RGPREFIX}"]?4:3)  ; check for old prefix
exten => s,3,Set(CALLERID(name)=${CALLERID(name):${LEN(${RGPREFIX})}})                  ; strip off old prefix
exten => s,4,Set(DYNAMIC_FEATURES=voiperapps)
exten => s,5,DeadAGI(dialparties.agi)
exten => s,6,NoOp(Returned from dialparties with no extensions to call)
exten => s,7,NoOp(DIALSTATUS is '${DIALSTATUS}')

exten => s,10,Dial(${ds}M(updatedbchannel,${CTICALLID}|-2))                             ; dialparties will set the priority to 10 if $ds is not null

exten => s,20,NoOp(Returned from dialparties with hunt groups to dial)
exten => s,21,Set(HuntLoop=0)
exten => s,22,GotoIf($[${HuntMembers} >= 1]?30)                                         ; if this is from rg-group, don't strip prefix
exten => s,23,NoOp(Returning there are no members left in the hunt group to ring)

exten => s,30,Set(HuntMember=HuntMember${HuntLoop})
exten => s,31,GotoIf($[$["${CALLTRACE_HUNT}" != "" ] & $["${RingGroupMethod}" = "hunt" ]]?32:35)  ; Set CAll Trace for Hunt member we are going to call
exten => s,32,Set(CT_EXTEN=${CUT(ARG3,,$[${HuntLoop} + 1])})
exten => s,33,Set(DB(CALLTRACE/${CT_EXTEN})=${CALLTRACE_HUNT})
exten => s,34,Goto(s,42)

exten => s,35,GotoIf($[$["${CALLTRACE_HUNT}" != "" ] & $["${RingGroupMethod}" = "memoryhunt" ]]?36:50)  ;Set Call Trace for each hunt member we are going to call "Memory groups have multiple members to set CALL TRACE For hence the loop"
exten => s,36,Set(CTLoop=0)
exten => s,37,GotoIf($[${CTLoop} > ${HuntLoop}]?42)                                     ; if this is from rg-group, don't strip prefix
exten => s,38,Set(CT_EXTEN=${CUT(ARG3,,$[${CTLoop} + 1])})
exten => s,39,Set(DB(CALLTRACE/${CT_EXTEN})=${CALLTRACE_HUNT})
exten => s,40,Set(CTLoop=$[1 + ${CTLoop}])
exten => s,41,Goto(s,37)

exten => s,42,Dial(${${HuntMember}}${ds})                                               ; dialparties will set the priority to 20 if $ds is not null and its a hunt group
exten => s,43,Set(HuntLoop=$[1 + ${HuntLoop}])
exten => s,44,Set(HuntMembers=$[${HuntMembers} - 1])
exten => s,45,Goto(s,22)
exten => s,50,DBdel(CALLTRACE/${CT_EXTEN})
exten => s,51,Goto(s,42)

; make sure hungup calls go here.

exten => h,1,Macro(globaldbchannel,${CTICALLID}|0:0:-3)
exten => h,n,Macro(hangupcall)

; Ring an extension, if the extension is busy or there is no answer send it
; to voicemail
; ARGS: $VMBOX, $EXT

[macro-exten-vm]
exten => s,1,Set(FROMCONTEXT=exten-vm)
exten => s,n,Set(VMBOX=${ARG1})
exten => s,n,Set(EXTTOCALL=${ARG2})
exten => s,n,Set(GOTOAPPS_CTX=${ARG3})
exten => s,n,Set(GOTOAPPS_EXT=${ARG4})
exten => s,n,Set(GOTOAPPS_PRI=${ARG5})
exten => s,n,Set(CFUEXT=${DB(CFU/${EXTTOCALL})})
exten => s,n,Set(CFBEXT=${DB(CFB/${EXTTOCALL})})
exten => s,n,Set(CHECKVM=${DB(SEG/${ARG1})})
exten => s,n,Set(RINGPHONE=${IF($["foo${RINGTIME${ARG2}}"!="foo"]?${RINGTIME${ARG2}}:${RINGTIMER})})
exten => s,n,Set(RT=${IF($[$["${VMBOX}"!="novm"] | $["foo${CFUEXT}"!="foo"]]?${RINGPHONE}:"")})
exten => s,n,Set(__PICKUPMARK=${ARG2})
exten => s,n,Macro(insertdbchannel,${CTICALLID}|${CHANNEL})
exten => s,n,Macro(record-enable,${EXTTOCALL},IN)
exten => s,n,GotoIf($["${CHANNEL:0:5}" = "Local" & "${CTICALLID}" = ""]?dolocaldial,1) ; if the channel is Local
exten => s,n,Macro(dial,${RT},${DIAL_OPTIONS},${EXTTOCALL},)
exten => s,n,GosubIf($[$["${DIALSTATUS}"="NOANSWER"] & $["foo${CFUEXT}"!="foo"]]?docfu,1) ; check for CFU in use on no answer
exten => s,n,GosubIf($[$["${DIALSTATUS}"="BUSY"] & $["foo${CFBEXT}"!="foo"]]?docfb,1) ; check for CFB in use on busy
exten => s,n,GosubIf($[$["${DIALSTATUS}"="NOANSWER"] & $["${VMBOX}"="jump"]]?jumpout,1)
exten => s,n,GosubIf($[$["${DIALSTATUS}"="BUSY"] & $["${VMBOX}"="jump"]]?jumpout,1)
exten => s,n,GosubIf($[$["${DIALSTATUS}"="CHANUNAVAIL"] & $["${VMBOX}"="jump"]]?jumpout,1)
exten => s,n,NoOp(Voicemail is '${VMBOX}')
exten => s,n,GotoIf($["${CHECKVM}" = "NO"]?s-BUSY,1)
exten => s,n,GotoIf($["${VMBOX}" = "novm"]?s-${DIALSTATUS},1) ; no voicemail in use for this extension
exten => s,n,NoOp(Sending to Voicemail box ${EXTTOCALL})
exten => s,n,Macro(vm,${VMBOX},${DIALSTATUS})

; Local channel should try to ring the phone only then come back out
; i.e. it's wrong for it to Answer the call in any way (including Congestion
; and stop the initiating dialplan from being returned to)
exten => dolocaldial,1,Macro(dial,,${DIAL_OPTIONS},${EXTTOCALL},)
exten => dolocaldial,n,NoOp(Returned to dolocaldial with DIALSTATUS '${DIALSTATUS}')
exten => dolocaldial,n,Macro(updatedbchannel,${CTICALLID}|${HANGUPCAUSE})

; Try the Call Forward on No Answer / Unavailable number
exten => docfu,1,Set(RTCFU=${IF($["${VMBOX}"!="novm"]?${RINGPHONE}:"")})
exten => docfu,n,Dial(Local/${CFUEXT}@from-internal/n,${RTCFU},${DIAL_OPTIONS})
exten => docfu,n,Return

; Try the Call Forward on Busy number
exten => docfb,1,Set(RTCFB=${IF($["${VMBOX}"!="novm"]?${RINGPHONE}:"")})
exten => docfb,n,Dial(Local/${CFBEXT}@from-internal/n,${RTCFB},${DIAL_OPTIONS})
exten => docfb,n,Return

exten => jumpout,1,NoOp(Sending to a destination ${GOTOAPPS_CTX},${GOTOAPPS_EXT},${GOTOAPPS_PRI})
exten => jumpout,n,Goto(${GOTOAPPS_CTX},${GOTOAPPS_EXT},${GOTOAPPS_PRI})
exten => jumpout,n,Return

; Extensions with no Voicemail box reporting BUSY - NOANSWER - CHANUNVAIL come here
exten => s-BUSY,1,NoOp(Extension is reporting BUSY and not passing to Voicemail)
exten => s-BUSY,n,Macro(recallonbusy)
exten => s-BUSY,n,Macro(updatedbchannel,${CTICALLID}|17)
exten => s-BUSY,n,Progress
exten => s-BUSY,n,Answer()
exten => s-BUSY,n,Playtones(busy)
exten => s-BUSY,n,Wait(30)

exten => s-NOANSWER,1,NoOp(Extension is reporting NOANSWER and not passing to Voicemail)
exten => s-NOANSWER,n,Macro(updatedbchannel,${CTICALLID}|19)
exten => s-NOANSWER,n,Progress
exten => s-NOANSWER,n,Answer()
exten => s-NOANSWER,n,Playtones(busy)
exten => s-NOANSWER,n,Wait(30)

exten => s-CHANUNAVAIL,1,NoOp(Trunk is reporting CHANUNAVAIL and not passing to Voicemail)
exten => s-CHANUNAVAIL,n,Macro(updatedbchannel,${CTICALLID}|44)
exten => s-CHANUNAVAIL,n,Progress
exten => s-CHANUNAVAIL,n,Answer()
exten => s-CHANUNAVAIL,n,Playtones(congestion)
exten => s-CHANUNAVAIL,n,Wait(30)

exten => s-CANCEL,1,NoOp(Trunk is reporting CANCEL and not passing to Voicemail)
exten => s-CANCEL,n,Macro(updatedbchannel,${CTICALLID}|0)
exten => s-CANCEL,n,Progress
exten => s-CANCEL,n,Answer()
exten => s-CANCEL,n,Playtones(congestion)
exten => s-CANCEL,n,Wait(30)
												
exten => _s-.,1,NoOp(Trunk is reporting ${DIALSTATUS} and not passing to Voicemail)
exten => _s-.,n,Macro(updatedbchannel,${CTICALLID}|0)
exten => _s-.,n,Progress
exten => _s-.,n,Answer()
exten => _s-.,n,Playtones(congestion)
exten => _s-.,n,Wait(30)

[macro-vm]
;exten => s,1,Set(LANGUAGE()=it)
exten => s,1,Set(VMGAIN=${IF($["foo${VM_GAIN}"!="foo"]?"g(${VM_GAIN})":"")})
exten => s,n,Wait(2)
exten => s,n,Goto(s-${ARG2},1)

exten => s-BUSY,1,NoOp(BUSY voicemail)
exten => s-BUSY,n,Macro(globaldbchannel,${CTICALLID}|0:0:-3)
exten => s-BUSY,n,Macro(recallauto)
exten => s-BUSY,n,Voicemail(${ARG1}|${VM_OPTS}b${VMGAIN})                   ; Voicemail Busy message
exten => s-BUSY,n,Goto(exit-${VMSTATUS},1)

exten => s-DIRECTDIAL,1,NoOp(DIRECTDIAL voicemail from callerid: ${CALLERID(num)})
exten => s-DIRECTDIAL,n,Macro(globaldbchannel,${CTICALLID}|0:0:-3)
exten => s-DIRECTDIAL,n,Voicemail(${ARG1}|${VM_OPTS}${VM_DDTYPE}${VMGAIN})  ; Just play 'To leave a message..'
exten => s-DIRECTDIAL,n,Goto(exit-${VMSTATUS},1)

exten => s-CHANUNAVAIL,1,NoOp(CHANUNAVAIL voicemail)
exten => s-CHANUNAVAIL,n,Macro(globaldbchannel,${CTICALLID}|0:0:-3)
exten => s-CHANUNAVAIL,n,Voicemail(${ARG1}|${VM_OPTS}u${VMGAIN})            ; Voicemail Unavailable message
exten => s-CHANUNAVAIL,n,Goto(exit-${VMSTATUS},1)

exten => _s-.,1,NoOp(NOANSWER voicemail)
exten => _s-.,n,Macro(globaldbchannel,${CTICALLID}|0:0:-3)
exten => _s-.,n,Macro(recallauto)
exten => _s-.,n,Voicemail(${ARG1}|${VM_OPTS}u${VMGAIN})                     ; Voicemail Unavailable message
exten => _s-.,n,Goto(exit-${VMSTATUS},1)

exten => o,1,Background(attendere_prego)                                    ; 0 during vm message will hangup
exten => o,n,GotoIf($["x${OPERATOR_XTN}"="x"]?nooper:from-internal,${OPERATOR_XTN},1)
exten => o,n(nooper),GotoIf($["x${FROM_DID}"="x"]?nodid)
exten => o,n,Dial(Local/${FROM_DID}@from-pstn)
exten => o,n,Macro(hangup)
exten => o,n(nodid),Dial(Local/s@from-pstn)
exten => o,n,Macro(hangup)

exten => a,1,VoiceMailMain(${ARG1})
exten => a,n,Hangup

exten => exit-FAILED,1,Wait(2)
exten => exit-FAILED,n,Playback(beeperr)                        ;(errore_nel_sistema)
exten => exit-FAILED,n,Wait(1)
exten => exit-FAILED,n,Hangup()

exten => exit-SUCCESS,1,Wait(2)
exten => exit-SUCCESS,n,Playback(arrivederci)
exten => exit-SUCCESS,n,Wait(1)
exten => exit-SUCCESS,n,Hangup()

exten => exit-USEREXIT,1,Wait(2)
exten => exit-USEREXIT,n,Playback(arrivederci)
exten => exit-USEREXIT,n,Wait(1)
exten => exit-USEREXIT,n,Hangup()

exten => t,1,Hangup()

; For some reason, if I don't run setCIDname, CALLERIDNAME will be blank in my AGI
; ARGS: none
[macro-fixcid]
exten => s,1,Set(CALLERID(name)=${CALLERID(name)})

; Ring groups of phones
; ARGS: comma separated extension list
; 1 - Ring Group Strategy
; 2 - ringtimer
; 3 - prefix
; 4 - extension list
; 5 - callerannounce
; 6 - alert info
; 7 - music on hold category
[macro-rg-group]
exten => s,1,GotoIf($["${CALLERID(name):0:${LEN(${RGPREFIX})}}" != "${RGPREFIX}"]?nofixprefix:fixprefix)    ; check for old prefix
exten => s,n(fixprefix),Set(CALLERID(name)=${CALLERID(name):${LEN(${RGPREFIX})}})                           ; strip off old prefix
exten => s,n(nofixprefix),Set(RGPREFIX=${ARG3})                                                             ; set new prefix
exten => s,n,Set(CALLERID(name)=${RGPREFIX}${CALLERID(name)})                                               ; add prefix to callerid name
exten => s,n,GotoIf($["${ARG6}" = ""]?nosipheader:sipheader)
exten => s,n(sipheader),SIPAddHeader("${ARG6}")
exten => s,n(nosipheader),Set(RecordMethod=Group)                                                           ; set new prefix
exten => s,n,Macro(record-enable,${MACRO_EXTEN},${RecordMethod})
exten => s,n,Set(RingGroupMethod=${ARG1})
exten => s,n,GotoIf($["${ARG5}" = ""]?noplaycustommsg:playcustommsg)                                        ; check play a custom message
exten => s,n(playcustommsg),GotoIf($["${DIALSTATUS}" = "ANSWER"]?noanswercall:answercall)                   ; check if the dialstatus response answer
exten => s,n(answercall),Answer
exten => s,n(noanswercall),Wait(0.5)
exten => s,n,Playback(custom/${ARG5})                                                                       ; play custom message (no background)
exten => s,n,Wait(0.5)
exten => s,n(noplaycustommsg),Macro(dial,${ARG2},${ARG7},${ARG4},)
exten => s,n,Set(RingGroupMethod='')

; Outgoing channel(s) are busy ... inform the client

[macro-outisbusy]
exten => s,1,GotoIf($["${TRUNKBUSY_ALERT}" = "enabled"]?:tones)
exten => s,n,Playback(linea_imp)
exten => s,n,Goto(exit)
exten => s,n(tones),Playtones(congestion)
exten => s,n,Congestion(30)
exten => s,n(exit),Macro(hangupcall)

; What to do on hangup.
[macro-hangupcall]
exten => s,1,ResetCDR(w)
exten => s,n,NoCDR()
exten => s,n,Wait(1)
exten => s,n,Hangup

[macro-faxreceive]
exten => s,1,Set(FAXFILE=/var/spool/asterisk/fax/${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${UNIQUEID}.tif)
exten => s,n,Set(EMAILADDR=${FAX_RX_EMAIL})
exten => s,n,Set(EMAILADDR2=${FAX_RX_EMAIL2})
exten => s,n,Set(LOCALSTATIONID="VoiperPBX Receive Fax")
exten => s,n(faxloop),rxfax(${FAXFILE})
exten => s,n,Goto(faxloop)

; dialout and strip the prefix
[macro-dialout]
exten => s,1,GotoIf($["${ECID${CALLERID(num)}}" = ""]?a4)                        ;check for CID override for exten
exten => s,n,Set(CALLERID(all)=${ECID${CALLERID(num)}})
exten => s,n,Goto(a6)
exten => s,n(a4),GotoIf($["${OUTCID_${ARG1}}" = ""]?a6)                          ;check for CID override for trunk
exten => s,n,Set(CALLERID(all)=${OUTCID_${ARG1}})
exten => s,n(a6),Set(length=${LEN(${DIAL_OUT_${ARG1}})})
exten => s,n,Dial(${OUT_${ARG1}}/${ARG2:${length}})
exten => s,n,Playtones(congestion)
exten => s,n,Congestion(5)

exten => s,108,Macro(outisbusy)

; dialout using default OUT trunk - no prefix
[macro-dialout-default]
exten => s,1,Set(NUMERO_DIAL=${ARG1})
exten => s,n,Macro(record-enable,${CALLERID(num)},OUT)
exten => s,n,GotoIf($["${ECID${CALLERID(num)}}" = ""]?a6:a4)                       ;check for CID override for exten
exten => s,n(a4),Set(CALLERID(all)=${ECID${CALLERID(num)}})
exten => s,n,Goto(a8)
exten => s,n(a6),GotoIf($["${OUTCID}" = ""]?a8)                                    ;check for CID override for trunk
exten => s,n,Set(CALLERID(all)=${OUTCID})
exten => s,n(a8),Dial(${OUT}/${ARG1})
exten => s,n,Playtones(congestion)
exten => s,n,Congestion(5)

exten => s,109,Macro(outisbusy)

; dialout using a trunk, using pattern matching (don't strip any prefix)
; arg1 = trunk number, arg2 = number, arg3 = local cid, arg4 = route password
[macro-dialout-trunk]
exten => s,1,DeadAGI(prefixfilter.agi)
exten => s,n,Set(DYNAMIC_FEATURES=voiperapps)
exten => s,n,GotoIf($["${ARG4}" = ""]?notreqpw:reqpw)
exten => s,n(reqpw),Authenticate(${ARG4})
exten => s,n(notreqpw),Set(NUMERO_DIAL=${ARG2})
exten => s,n,Macro(record-enable,${CALLERID(num)},OUT)
exten => s,n,GotoIf($["${ARG3}" = "1"]?skipcidtrunk) 
exten => s,n,GotoIf($["${ECID${CALLERID(num)}}" = ""]?cidtrunk)
exten => s,n,Set(CALLERID(all)=${ECID${CALLERID(num)}})
exten => s,n,Goto(skipcidtrunk)
exten => s,n(cidtrunk),GotoIf($["${OUTCID_${ARG1}}" = ""]?skipcidtrunk)
exten => s,n,Set(CALLERID(all)=${OUTCID_${ARG1}})
exten => s,n(skipcidtrunk),Set(GROUP()=OUT_${ARG1})
exten => s,n,GotoIf($[${GROUP_COUNT(OUT_${ARG1})} > ${OUTMAXCHANS_${ARG1}}]?maxchans)
exten => s,n,Set(DIAL_NUMBER=${ARG2})
exten => s,n,Set(DIAL_TRUNK=${ARG1})
exten => s,n,DeadAGI(fixlocalprefix)  
exten => s,n,Set(OUTNUM=${OUTPREFIX_${DIAL_TRUNK}}${DIAL_NUMBER})
exten => s,n,Set(custom=${CUT(OUT_${DIAL_TRUNK},:,1)})
exten => s,n,GotoIf($["${custom}" = "AMP"]?customtrunk)
exten => s,n,Dial(${OUT_${ARG1}}/${OUTNUM},300,${DIAL_OPTIONS2})
exten => s,n(exit),Goto(s-${DIALSTATUS},1)
exten => s,n(customtrunk),Set(pre_num=${CUT(OUT_${DIAL_TRUNK},$,1)})
exten => s,n,Set(the_num=${CUT(OUT_${DIAL_TRUNK},$,2)})
exten => s,n,Set(post_num=${CUT(OUT_${DIAL_TRUNK},$,3)})
exten => s,n,GotoIf($["${the_num}" = "OUTNUM"]?setnum:dialnow)
exten => s,n(setnum),Set(the_num=${OUTNUM})
exten => s,n(dialnow),Dial(${pre_num:4}${the_num}${post_num},300,${DIAL_OPTIONS2})
exten => s,n,Goto(s-${DIALSTATUS},1)
exten => s,n(maxchans),NoOp(Trunk is reporting Max channels used UP)
exten => s,n,Wait(1)
exten => s,n,Playback(${TRUNK_ALERT})

exten => s-BUSY,1,NoOp(Trunk is reporting BUSY)
exten => s-BUSY,n,Busy()
exten => s-BUSY,n,Wait(60)
exten => s-BUSY,n,NoOp()
exten => s-CHANUNAVAIL,1,NoOp(Trunk is reporting CHANUNAVAIL)
exten => s-CHANUNAVAIL,n,Wait(1)
exten => s-CHANUNAVAIL,n,Playback(${TRUNK_ALERT})
exten => s-NOANSWER,1,NoOp(Trunk is reporting NOANSWER)
exten => s-NOANSWER,n,Busy()
exten => s-NOANSWER,n,Wait(60)
exten => s-NOANSWER,n,NoOp()
exten => s-NOPERMISSION,1,NoOp(Trunk is reporting NOPERMISSION to CALL)
exten => s-NOPERMISSION,n,Wait(1)
exten => s-NOPERMISSION,n,Playback(${TRUNK_ALERT})
exten => s-CANCEL,1,NoOp(Dial failed due to trunk reporting CANCEL - giving up)
exten => s-CANCEL,n,Playtones(congestion)
exten => s-CANCEL,n,Congestion(20)

exten => _s-.,1,NoOp(Dial failed due to ${DIALSTATUS})
exten => h,1,Macro(hangupcall)

; dialout using a trunk, using pattern matching (don't strip any prefix)
; arg1 = trunk number, arg2 = number, arg3 = local cid, arg4 = route password
[macro-dialout-trunk_simul]
exten => s,1,DeadAGI(prefixfilter_cti.agi)
exten => s,n,Set(DYNAMIC_FEATURES=voiperapps)
exten => s,n,GotoIf($["${ARG4}" = ""]?notreqpw:reqpw)
exten => s,n(reqpw),Authenticate(${ARG4})
exten => s,n(notreqpw),Set(NUMERO_DIAL=${ARG2})
exten => s,n,Macro(record-enable,${CALLERID(num)},OUT)
exten => s,n,GotoIf($["${ARG3}" = "1"]?skipcidtrunk) 
exten => s,n,GotoIf($["${ECID${CALLERID(num)}}" = ""]?cidtrunk)
exten => s,n,Set(CALLERID(all)=${ECID${CALLERID(num)}})
exten => s,n,Goto(skipcidtrunk)
exten => s,n(cidtrunk),GotoIf($["${OUTCID_${ARG1}}" = ""]?skipcidtrunk)
exten => s,n,Set(CALLERID(all)=${OUTCID_${ARG1}})
exten => s,n(skipcidtrunk),Set(GROUP()=OUT_${ARG1})
exten => s,n,GotoIf($[${GROUP_COUNT(OUT_${ARG1})} > ${OUTMAXCHANS_${ARG1}}]?maxchans)
exten => s,n,Set(DIAL_NUMBER=${ARG2})
exten => s,n,Set(DIAL_TRUNK=${ARG1})
exten => s,n,DeadAGI(fixlocalprefix)  
exten => s,n,Set(OUTNUM=${OUTPREFIX_${DIAL_TRUNK}}${DIAL_NUMBER})
exten => s,n,Set(custom=${CUT(OUT_${DIAL_TRUNK},:,1)})
exten => s,n,GotoIf($["${custom}" = "AMP"]?customtrunk)
exten => s,n,Dial(${OUT_${ARG1}}/${OUTNUM},300,${DIAL_OPTIONS2})
exten => s,n(exit),Goto(s-${DIALSTATUS},1)
exten => s,n(customtrunk),Set(pre_num=${CUT(OUT_${DIAL_TRUNK},$,1)})
exten => s,n,Set(the_num=${CUT(OUT_${DIAL_TRUNK},$,2)})
exten => s,n,Set(post_num=${CUT(OUT_${DIAL_TRUNK},$,3)})
exten => s,n,GotoIf($["${the_num}" = "OUTNUM"]?setnum:dialnow)
exten => s,n(setnum),Set(the_num=${OUTNUM})
exten => s,n(dialnow),Dial(${pre_num:4}${the_num}${post_num},300,${DIAL_OPTIONS2})
exten => s,n,Goto(s-${DIALSTATUS},1)
exten => s,n(maxchans),NoOp(Trunk is reporting Max channels used UP)
exten => s,n,Wait(1)
exten => s,n,Playback(${TRUNK_ALERT})

exten => s-BUSY,1,NoOp(Trunk is reporting BUSY)
exten => s-BUSY,n,Busy()
exten => s-BUSY,n,Wait(60)
exten => s-BUSY,n,NoOp()
exten => s-CHANUNAVAIL,1,NoOp(Trunk is reporting CHANUNAVAIL)
exten => s-CHANUNAVAIL,n,Playback(${TRUNK_ALERT})
exten => s-CHANUNAVAIL,n,Busy()
exten => s-CHANUNAVAIL,n,Wait(60)
exten => s-CHANUNAVAIL,n,NoOp()
exten => s-NOANSWER,1,NoOp(Trunk is reporting NOANSWER)
exten => s-NOANSWER,n,Busy()
exten => s-NOANSWER,n,Wait(60)
exten => s-NOANSWER,n,NoOp()
exten => s-CONGESTION,1,NoOp(Trunk is reporting CONGESTION)
exten => s-CONGESTION,n,Busy()
exten => s-CONGESTION,n,Wait(60)
exten => s-CONGESTION,n,NoOp()
exten => s-NOPERMISSION,1,NoOp(Trunk is reporting NOPERMISSION to CALL)
exten => s-NOPERMISSION,n,Wait(1)
exten => s-NOPERMISSION,n,Playback(${TRUNK_ALERT})
exten => s-CANCEL,1,NoOp(Dial failed due to trunk reporting CANCEL - giving up)
exten => s-CANCEL,n,Playtones(congestion)
exten => s-CANCEL,n,Congestion(20)

exten => _s-.,1,NoOp(Dial failed due to ${DIALSTATUS})
exten => h,1,Macro(hangupcall)

; Adds a dynamic agent/member to a Queue
; Prompts for call-back number - in not entered, uses CIDNum
[macro-agent-add]
exten => s,1,Wait(0.5)
exten => s,n(loop),Macro(user-callerid)
exten => s,n,Read(CALLBACKNUM,agent-user)   ; get callback number from user
exten => s,n,GotoIf($["${CALLBACKNUM}" = ""]?press:notpress)   ; if user just pressed # or timed out, use cidnum
exten => s,n(press),Set(CALLBACKNUM=${CALLERID(num)})
exten => s,n,GotoIf($["${CALLBACKNUM}" = ""]?loop) ; if still no number, start over
exten => s,n(notpress),GotoIf($["${ARG2}" = ""]?notpw:pw)  ; arg2 is queue password
exten => s,n(pw),Authenticate(${ARG2})
exten => s,n(notpw),AddQueueMember(${ARG1}|Local/${CALLBACKNUM}@from-internal/n)   ; using chan_local allows us to have agents over trunks
exten => s,n,UserEvent(Agentlogin|Agent: ${CALLBACKNUM})
exten => s,n,Wait(0.5)
exten => s,n,Playback(agent-loginok)
exten => s,n,Hangup()

; Removes a dynamic agent/member from a Queue
; Prompts for call-back number - in not entered, uses CIDNum
[macro-agent-del]
exten => s,1,Wait(0.5)
exten => s,n(loop),Macro(user-callerid)
exten => s,n,Read(CALLBACKNUM,agent-user)   ; get callback number from user
exten => s,n,GotoIf($["${CALLBACKNUM}" = ""]?press:notpress)   ; if user just pressed # or timed out, use cidnum
exten => s,n(press),Set(CALLBACKNUM=${CALLERID(num)})
exten => s,n,GotoIf($["${CALLBACKNUM}" = ""]?loop) ; if still no number, start over
exten => s,n(notpress),RemoveQueueMember(${ARG1}|Local/${CALLBACKNUM}@from-internal/n)
exten => s,n,UserEvent(RefreshQueue)
exten => s,n,Wait(0.5)
exten => s,n,Playback(agent-loggedoff)
exten => s,n,Hangup()

[macro-dialout-enum]
exten => s,1,DeadAGI(prefixfilter.agi)
exten => s,n,Set(DYNAMIC_FEATURES=voiperapps)
exten => s,n,GotoIf($["${ARG4}" != ""]?passwd:nopasswd)
exten => s,n(passwd),Authenticate(${ARG4})
exten => s,n(nopasswd),Set(GROUP()=OUT_${ARG1})
exten => s,n,Gotoif($["${OUTMAXCHANS_${ARG1}}foo" = "foo"],nomax)
exten => s,n,Gotoif($[${GROUP_COUNT(OUT_${ARG1})} > ${OUTMAXCHANS_${ARG1}}]?nochans)
exten => s,n(nomax),Set(NUMERO_DIAL=${ARG2})
exten => s,n,Macro(record-enable,${CALLERID(num)},OUT)
exten => s,n,GotoIf($["${ARG3}" = "1"]?skipcid)
exten => s,n,GotoIf($["${ECID${CALLERID(num)}}" = ""]?globalcid)
exten => s,n,Set(CALLERID(all)=${ECID${CALLERID(num)}})
exten => s,n,Goto(skipcid)
exten => s,n(globalcid),GotoIf($["${OUTCID_${ARG1}}" = ""]?skipcid)
exten => s,n,Set(CALLERID(all)=${OUTCID_${ARG1}})
exten => s,n(skipcid),Set(DIAL_NUMBER=${ARG2})
exten => s,n,Set(DIAL_TRUNK=${ARG1})
exten => s,n,DeadAGI(fixlocalprefix)
exten => s,n,DeadAGI(enumlookup.agi)
exten => s,n(dialloop),Gotoif($["foo${DIALARR}"="foo"]?end)
exten => s,n,Set(TRYDIAL=${CUT(DIALARR,%,1)})
exten => s,n,Set(DIALARR=${CUT(DIALARR,%,2-)})
exten => s,n,Dial(${TRYDIAL},300,${DIAL_OPTIONS2})
exten => s,n,NoOp(Dial exited in macro-dialout-enum with ${DIALSTATUS})
exten => s,n,Gotoif($[$["${DIALSTATUS}" = "CHANUNAVAIL" ] | $[ "${DIALSTATUS}" = "CONGESTION" ]]?dialloop)
exten => s,n(exit),Goto(s-${DIALSTATUS},1)
exten => s,n(nochans),NoOp(max channels used up)
exten => s,n(end),NoOp(Exiting macro-dialout-enum)

exten => s-BUSY,1,NoOp(Trunk is reporting BUSY)
exten => s-BUSY,n,Busy(60)
exten => _s-.,1,NoOp(Trunk is reporting ${DIALSTATUS})
exten => _s-.,n,Playtones(congestion)

[macro-record-enable]
exten => s,1,GotoIf($[${LEN(${BLINDTRANSFER})} > 0]?okblind:noblind)
exten => s,n(okblind),ResetCDR(w)
exten => s,n,StopMixMonitor

exten => s,n(noblind),GotoIf($["${CALLERID(num)}" = ""]?setemptycid:setcid)
exten => s,n(setemptycid),Set(FIXCALLERIDNUM=anonymous)
exten => s,n,Goto(continue)
exten => s,n(setcid),Set(FIXCALLERIDNUM=${CALLERID(num)})

exten => s,n(continue),GotoIf($["${ARG2}" = "OUT"]?checkrecordout:continue1)
exten => s,n(checkrecordout),Set(RecEnable=${DB_EXISTS(RECORD-OUT/${ARG1})})

exten => s,n,GotoIf($["${ARG1}" = "${FIXCALLERIDNUM}"]?recordout:continue2)
exten => s,n(recordout),Set(CALLFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-OUT${ARG1}-${NUMERO_DIAL}-^-${UNIQUEID})
exten => s,n,Goto(continue3)

exten => s,n(continue2),Set(CALLFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-OUT${ARG1}-${FIXCALLERIDNUM}-${NUMERO_DIAL}-^-${UNIQUEID})
exten => s,n(continue3),Goto(mainrecord)
exten => s,n(continue1),GotoIf($["${ARG2}" = "Group"]?recordgroup:checkrecordin)
exten => s,n(recordgroup),DeadAGI(recordingcheck)
exten => s,n,Set(CALLFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-GROUP${ARG1}-${FIXCALLERIDNUM}-^-${UNIQUEID})
exten => s,n,Goto(mainrecord)

exten => s,n(checkrecordin),Set(RecEnable=${DB_EXISTS(RECORD-IN/${ARG1})})
exten => s,n,GotoIf($["${NUMERO_DIAL}" = ""]?recordin:continue4))
exten => s,n(recordin),Set(CALLFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-IN${ARG1}-${FIXCALLERIDNUM}-^-${UNIQUEID})
exten => s,n,Goto(mainrecord)
exten => s,n(continue4),Set(CALLFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-IN${ARG1}-${FIXCALLERIDNUM}-${NUMERO_DIAL}-^-${UNIQUEID})

exten => s,n(mainrecord),Set(TOUCH_MONITOR=${CALLFILENAME})
exten => s,n,Set(TOUCH_MONITOR_FORMAT=wav)
exten => s,n,GotoIf($["${RecEnable}" = "1"]?recenabled:100)
exten => s,n(recenabled),SetCDRUserField(${CALLFILENAME})
exten => s,n,GotoIf($["${WAV2MP3}" = "enabled"]?mp3:wav)
exten => s,n(mp3),Set(MP3_CONVERSION=nice -n 19 lame --preset voice -v -b 96 -a "/var/spool/asterisk/monitor/${CALLFILENAME}.wav" "/var/spool/asterisk/monitor/${CALLFILENAME}.mp3" && rm -f "/var/spool/asterisk/monitor/${CALLFILENAME}.wav")
exten => s,n(wav),MixMonitor(${CALLFILENAME}.wav|b|${MP3_CONVERSION})
exten => s,n,MacroExit

exten => s,100,Noop(No Recording Enabled for this call)

[macro-joinmeetme]                                                                              ;arg1=roomnum, arg2=options, arg3=userpin, arg4=adminpin
exten => s,1,GotoIf($["${DIALSTATUS}" = "ANSWER"],isanswered)
exten => s,n,Answer
exten => s,n,Set(LANGUAGE()=${ARG5})
exten => s,n(isanswered),Set(MEETME_RECORDINGFILE=/var/spool/asterisk/monitor/${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-CONF${ARG1}-FROM${CALLERID(num)}-^-${UNIQUEID})
exten => s,n,Noop(${ARG1}-${ARG2}-${ARG3}-${ARG4}-${ARG5})
exten => s,n,GotoIf($["foo${ARG3}foo${ARG4}" = "foofoo"]?user:continue)                         ;USER e ADMIN senza PASSWORD
exten => s,n(continue),Set(PINCOUNT=0)
exten => s,n(loop),Read(PIN,conf-getpin)
exten => s,n,GotoIf($["x${PIN}"="x${ARG3}"]?user:continue1)                                     ;goto USER
exten => s,n(continue1),GotoIf($["x${PIN}"="x${ARG4}"]?admin:continue2)                         ;goto ADMIN
exten => s,n(continue2),Set(PINCOUNT=$[${PINCOUNT}+1])
exten => s,n,GotoIf($[${PINCOUNT}>3]?wrongpin)
exten => s,n,Playback(conf-invalidpin)
exten => s,n,Goto(loop)
exten => s,n(user),Set(CONFACCESS=${ARG2})
exten => s,n,Goto(confmain)
exten => s,n(admin),Set(CONFACCESS=aA${ARG2})
exten => s,n,Set(ARG3=${ARG4})
exten => s,n(confmain),MeetMe(${ARG1},${CONFACCESS},${ARG3})
exten => s,n(wrongpin),Playback(arrivederci)

exten => h,1,Hangup

; Privacy Manager Macro makes sure that any calls that don't pass the privacy manager are presented
; with congestion since there have been observed cases of the call continuing if not stopped with a
; congestion, and this provides a slightly more friendly 'sorry' message in case the user is
; legitamately trying to be cooperative.

[macro-privacy-mgr]
exten => s,1,Set(KEEPCID=${CALLERID(num)})
exten => s,n,GotoIf($["foo${CALLERID(num):0:1}"="foo+"]?CIDTEST2:CIDTEST1)
exten => s,n(CIDTEST1),Set(TESTCID=${MATH(1+${CALLERID(num)})})
exten => s,n,Goto(TESTRESULT)
exten => s,n(CIDTEST2),Set(TESTCID=${MATH(1+${CALLERID(num):1})})
exten => s,n(TESTRESULT),GotoIf($["foo${TESTCID}"="foo"]?CLEARCID:PRIVMGR)
exten => s,n(CLEARCID),Set(CALLERID(num)=)
exten => s,n(PRIVMGR),PrivacyManager()
exten => s,n,SetCallerPres(allowed_passed_screen); stop gap until app_privacy.c clears unavailble bit
exten => s,PRIVMGR+101,Noop(STATUS: ${PRIVACYMGRSTATUS} CID: ${CALLERID(num)} ${CALLERID(name)} CALLPRES: ${CALLLINGPRES})
exten => s,n,Playback(arrivederci)
exten => s,n,Playtones(congestion)
exten => s,n,Congestion(5)

[macro-tono_simulato]
exten => s,1,Answer
exten => s,n,Set(DIALED=${ARG1})
exten => s,n,Set(TOCONTEXT=${ARG2})
exten => s,n,Set(STRIP=${ARG3})
exten => s,n,Set(TONES=${ARG4})
exten => s,n,Goto(tono_simulato_pausa,s,1)

[tono_simulato_pausa]

exten => s,1,Set(TIMEOUT(digit)=0)
exten => s,n,Playtones(${TONES})
exten => s,n,Set(TIMEOUT(response)=15)

exten => _X,1,Set(DIALED=${DIALED}${EXTEN})
exten => _X,n,StopPlaytones
exten => _X,n,Goto(getanewdigits,1)

exten => getanewdigits,1,Set(TIMEOUT(digit)=5)
exten => getanewdigits,n,WaitExten(8)

exten => _X.,1,Goto(${TOCONTEXT}|$[${DIALED:${STRIP}}]${EXTEN}|1)

exten => t,1,Playtones(busy)
exten => t,n,Wait(10)
exten => t,n,Macro(hangupcall)

exten => h,1,Hangup

; This macro is for dev purposes and just dumps channel/app variables.  Useful when designing new contexts.
[macro-dumpvars]
exten => s,1,Noop(ACCOUNTCODE=${ACCOUNTCODE})
exten => s,n,Noop(ANSWEREDTIME=${ANSWEREDTIME})
exten => s,n,Noop(BLINDTRANSFER=${BLINDTRANSFER})
exten => s,n,Noop(CALLERID=${CALLERID(all)})
exten => s,n,Noop(CALLERID(name)=${CALLERID(name)})
exten => s,n,Noop(CALLERID(number)=${CALLERID(num)})
exten => s,n,Noop(CALLINGPRES=${CALLINGPRES})
exten => s,n,Noop(CHANNEL=${CHANNEL})
exten => s,n,Noop(CONTEXT=${CONTEXT})
exten => s,n,Noop(DATETIME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
exten => s,n,Noop(DIALEDPEERNAME=${DIALEDPEERNAME})
exten => s,n,Noop(DIALEDPEERNUMBER=${DIALEDPEERNUMBER})
exten => s,n,Noop(DIALEDTIME=${DIALEDTIME})
exten => s,n,Noop(DIALSTATUS=${DIALSTATUS})
exten => s,n,Noop(DNID=${DNID})
exten => s,n,Noop(EPOCH=${EPOCH})
exten => s,n,Noop(EXTEN=${EXTEN})
exten => s,n,Noop(HANGUPCAUSE=${HANGUPCAUSE})
exten => s,n,Noop(INVALID_EXTEN=${INVALID_EXTEN})
exten => s,n,Noop(LANGUAGE=${LANGUAGE})
exten => s,n,Noop(MEETMESECS=${MEETMESECS})
exten => s,n,Noop(PRIORITY=${PRIORITY})
exten => s,n,Noop(RDNIS=${RDNIS})
exten => s,n,Noop(SIPDOMAIN=${SIPDOMAIN})
exten => s,n,Noop(SIP_CODEC=${SIP_CODEC})
exten => s,n,Noop(SIPCALLID=${SIPCALLID})
exten => s,n,Noop(SIPUSERAGENT=${SIPUSERAGENT})
exten => s,n,Noop(TIMESTAMP=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
exten => s,n,Noop(TXTCIDNAME=${TXTCIDNAME})
exten => s,n,Noop(UNIQUEID=${UNIQUEID})
exten => s,n,Noop(TOUCH_MONITOR=${TOUCH_MONITOR})
exten => s,n,Noop(MACRO_CONTEXT=${MACRO_CONTEXT})
exten => s,n,Noop(MACRO_EXTEN=${MACRO_EXTEN})
exten => s,n,Noop(MACRO_PRIORITY=${MACRO_PRIORITY})


; ############################################################################
; Applications [app]
; ############################################################################
;
[app-directory]
;DIR-CONTEXT set in Digital Receptionist

exten => #,1,GotoIf($["${DIRECTORY}" = "disabled"]?exit:appdir)
exten => #,n(appdir),Wait(1)
exten => #,n,DeadAGI(directory,${DIR-CONTEXT},ext-local,${DIRECTORY:0:1}${DIRECTORY_OPTS}e)
exten => #,n,Playback(vm-goodbye)
exten => #,n(exit),Hangup

; *411 will access the entire directory (not just a single context)
exten => *411,1,GotoIf($["${DIRECTORY}" = "disabled"]?exit:appdir)
exten => *411,n(appdir),Answer
exten => *411,n,Wait(1)
exten => *411,n,DeadAGI(directory,general,ext-local,${DIRECTORY:0:1}${DIRECTORY_OPTS}e)
exten => *411,n,Playback(vm-goodbye)
exten => *411,n(exit),Hangup
exten => h,1,Hangup
exten => o,1,GotoIf($["${FROM_DID}" = ""]?from-pstn,s,1:from-pstn,${FROM_DID},1)

[app-segreteria]
exten => *74,1,Answer
exten => *74,n,Wait(1)
exten => *74,n,Set(DB(SEG/${CALLERID(num)}@default)=YES)
exten => *74,n,Playback(segreteria_attivata)
exten => *74,n,Macro(hangupcall)

exten => *75,1,Answer
exten => *75,n,Wait(1)
exten => *75,n,Set(DB(SEG/${CALLERID(num)}@default)=NO)
exten => *75,n,Playback(segreteria_disattivata)
exten => *75,n,Macro(hangupcall)

[app-ora_esatta]
exten => *76,1,Answer
exten => *76,n(loop),Wait(.3)
exten => *76,n,Playback(sono_le_ore)
exten => *76,n,SayUnixTime(||k)
exten => *76,n,Playback(e)
exten => *76,n,SayUnixTime(||M)
exten => *76,n,Playback(minuti)
exten => *76,n,Wait(1)
exten => *76,n,Playback(beep)
exten => *76,n,Wait(4)
exten => *76,n,Goto(loop)

[app-speakextennum]
exten => *66,1,Answer
exten => *66,n,Wait(1)
exten => *66,n,Playback(iltuonumeroditelefono)
exten => *66,n,Saydigits(${CALLERID(num)})
exten => *66,n,Wait(2)
exten => *66,n,Macro(hangupcall)

[app-monitor]
exten => *67,1,Answer
exten => *67,n,GotoIf($["${MONITOR_PASSWORD}" = ""]?nopw:pw)
exten => *67,n(pw),Authenticate(${MONITOR_PASSWORD})
exten => *67,n(nopw),Set(DB(RECORD-IN/${CALLERID(num)})=ENABLED)
exten => *67,n,Set(DB(RECORD-OUT/${CALLERID(num)})=ENABLED)
exten => *67,n,Playback(monitor_attivato)
exten => *67,n,Macro(hangupcall)

exten => *68,1,Answer
exten => *68,n,GotoIf($["${MONITOR_PASSWORD}" = ""]?nopw:pw)
exten => *68,n(pw),Authenticate(${MONITOR_PASSWORD})
exten => *68,n(nopw),DBdel(RECORD-IN/${CALLERID(num)})
exten => *68,n,DBdel(RECORD-OUT/${CALLERID(num)})
exten => *68,n,Playback(monitor_disattivato)
exten => *68,n,Macro(hangupcall)

[app-dnd]
exten => *78,1,Answer
exten => *78,n,Wait(1)
exten => *78,n,Set(DB(DND/${CALLERID(number)})=YES)
exten => *78,n,UserEvent(dnd_on|${CALLERID(num)})
exten => *78,n,Playback(non_distrurbare_attivato)
exten => *78,n,Macro(hangupcall)

exten => *79,1,Answer
exten => *79,n,Wait(1)
exten => *79,n,DBdel(DND/${CALLERID(num)})
exten => *79,n,Playback(non_distrurbare_disattivato)
exten => *79,n,Macro(hangupcall)

[app-messagecenter]
exten => *98,1,Answer
exten => *98,n,Wait(1)
exten => *98,n,VoiceMailMain(default)
exten => *98,n,Macro(hangupcall)

exten => _*98X.,1,Answer
exten => _*98X.,n,Wait(1)
exten => _*98X.,n,VoiceMailMain(${EXTEN:3}@default)
exten => _*98X.,n,Macro(hangupcall)

exten => *97,1,Answer
exten => *97,n,Wait(1)
exten => *97,n,VoicemailMain(${CALLERID(num)}@default)
exten => *97,n,Macro(hangupcall)

[app-echotest]
exten => *43,1,Answer
exten => *43,n,Wait(1)
exten => *43,n,Playback(demo-echotest)
exten => *43,n,Echo
exten => *43,n,Playback(demo-echodone)
exten => *43,n,Macro(hangupcall)

[app-callwaiting]
exten => *70,1,Answer
exten => *70,n,Wait(1)
exten => *70,n,Set(DB(CW/${CALLERID(num)})=ENABLED)
exten => *70,n,Playback(avviso_chiamata_attivato)
exten => *70,n,Macro(hangupcall)

exten => *71,1,Answer
exten => *71,n,Wait(1)
exten => *71,n,DBdel(CW/${CALLERID(num)})
exten => *71,n,Playback(avviso_chiamata_disattivato)
exten => *71,n,Macro(hangupcall)

[app-callforward]

; dialed call forward app - forwards calling extension
exten => _*72.,1,Set(DB(CF/${CALLERID(num)})=${EXTEN:3})
exten => _*72.,n,Answer
exten => _*72.,n,Wait(1)
exten => _*72.,n,Playback(trasferimento_chiamata_dal_numero)
exten => _*72.,n,SayDigits(${CALLERID(num)})
exten => _*72.,n,Playback(trasferimento_chiamata_verso_numero)
exten => _*72.,n,SayDigits(${EXTEN:3})
exten => _*72.,n,Macro(hangupcall)

; prompting call forward app - forwards entered extension
exten => *72,1,Answer
exten => *72,n,Wait(1)
exten => *72,n,Playback(trasferimento_chiamata_digita_numero)
exten => *72,n,Read(fromext,trasferimento_chiamata_tasto_cancelletto)
exten => *72,n,Wait(1)
exten => *72,n,Playback(trasferimento_chiamata_trasferire_chiamata)
exten => *72,n,Read(toext,trasferimento_chiamata_tasto_cancelletto)
exten => *72,n,Wait(1)
exten => *72,n,Set(DB(CF/${fromext})=${toext})
exten => *72,n,Playback(trasferimento_chiamata_dal_numero)
exten => *72,n,SayDigits(${fromext})
exten => *72,n,Playback(trasferimento_chiamata_verso_numero)
exten => *72,n,SayDigits(${toext})
exten => *72,n,Macro(hangupcall)

; cancels dialed extension call forward
exten => _*73.,1,DBdel(CF/${EXTEN:3})
exten => _*73.,n,Answer
exten => _*73.,n,Wait(1)
exten => _*73.,n,SayDigits(${EXTEN:3})
exten => _*73.,n,Playback(trasferimento_chiamata_disattivato)
exten => _*73.,n,Macro(hangupcall)

; cancels call forward for calling extension
exten => *73,1,DBdel(CF/${CALLERID(num)})
exten => *73,n,Answer
exten => *73,n,Wait(1)
exten => *73,n,Playback(trasferimento_chiamata_disattivato)
exten => *73,n,Macro(hangupcall)

[app-callforward-on-busy]

; dialed call forward on busy app - forwards calling extension when busy
exten => _*90.,1,Set(DB(CFB/${CALLERID(num)})=${EXTEN:3})
exten => _*90.,n,Answer
exten => _*90.,n,Wait(1)
exten => _*90.,n,Playback(trasferimento_chiamata_occ_dal_numero)
exten => _*90.,n,SayDigits(${CALLERID(num)})
exten => _*90.,n,Playback(trasferimento_chiamata_verso_numero)
exten => _*90.,n,SayDigits(${EXTEN:3})
exten => _*90.,n,Macro(hangupcall)

; cancels call forward on busy for calling extension
exten => *91,1,DBdel(CFB/${CALLERID(num)})
exten => *91,n,Answer
exten => *91,n,Wait(1)
exten => *91,n,Playback(trasferimento_chiamata_occ_disattivato)
exten => *91,n,Macro(hangupcall)

[app-rob-robauto]
exten => *61,1,Answer
exten => *61,n,Wait(1)
exten => *61,n,Set(DB(ROBCHECK/${CALLERID(num)})=ENABLED)
exten => *61,n,Playback(servizio_rob_attivato)
exten => *61,n,Macro(hangupcall)

exten => *62,1,Answer
exten => *62,n,Wait(1)
exten => *62,n,DBdel(ROBCHECK/${CALLERID(num)})
exten => *62,n,Playback(servizio_rob_disattivato)
exten => *62,n,Macro(hangupcall)

; chanspy
[app-chanspy]
exten => *63,1,Answer
exten => *63,n,Goto(confmenu,1)

exten => chanrecord,1,Set(CHANFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-SPY${fromext}-FROM${CALLERID(num)}-^-${UNIQUEID})
exten => chanrecord,n,GotoIf($["${WAV2MP3}" = "enabled"]?okmp3:nomp3)
exten => chanrecord,n(okmp3),Set(MP3_CONVERSION=nice -n 19 lame --preset voice -v -b 96 -a "/var/spool/asterisk/monitor/${CHANFILENAME}.wav" "/var/spool/asterisk/monitor/${CHANFILENAME}.mp3" && rm -f "/var/spool/asterisk/monitor/${CHANFILENAME}.wav")
exten => chanrecord,n(nomp3),MixMonitor(${CHANFILENAME}.wav||${MP3_CONVERSION})
exten => chanrecord,n,ChanSpy(${CHANTOSPY}/${fromext}|xq)
exten => chanrecord,n,Playback(zapbarge_nozap)
exten => chanrecord,n,StopMonitor()
exten => chanrecord,n,Wait(4)
exten => chanrecord,n,System(rm -f /var/spool/asterisk/monitor/${CHANFILENAME}.mp3)
exten => chanrecord,n,Goto(confmenu,nopw)

exten => channorecord,1,ChanSpy(${CHANTOSPY}/${fromext}|xq)
exten => channorecord,n,Playback(zapbarge_nozap)
exten => channorecord,n,Wait(0.5)
exten => channorecord,n,Goto(confmenu,nopw)

exten => chaninfinite,1,ChanSpy(${CHANTOSPY}/${fromext}|q)
exten => chaninfinite,n,Hangup

exten => chaninfiniterecord,1,Set(CHANFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-SPY${fromext}-FROM${CALLERID(num)}-^-${UNIQUEID})
exten => chaninfiniterecord,n,GotoIf($["${WAV2MP3}" = "enabled"]?3:4)
exten => chaninfiniterecord,n(okmp3),Set(MP3_CONVERSION=nice -n 19 lame --preset voice -v -b 96 -a "/var/spool/asterisk/monitor/${CHANFILENAME}.wav" "/var/spool/asterisk/monitor/${CHANFILENAME}.mp3" && rm -f "/var/spool/asterisk/monitor/${CHANFILENAME}.wav")
exten => chaninfiniterecord,n(nomp3),MixMonitor(${CHANFILENAME}.wav||${MP3_CONVERSION})
exten => chaninfiniterecord,n(spy),ChanSpy(${CHANTOSPY}/${fromext}|q)
exten => chaninfiniterecord,n,Hangup

exten => confmenu,1,GotoIf($["${ZAP_PASSWORD}" = ""]?nopw:pw)
exten => confmenu,n(pw),Authenticate(${ZAP_PASSWORD})
exten => confmenu,n(nopw),Read(fromext,zapbarge_inserire)
exten => confmenu,n,GotoIf($["${fromext}" = ""]?nopw:okdigita)
exten => confmenu,n(okdigita),Noop(Numero Digitato: E${fromext})
exten => confmenu,n,Noop(Canale in Database: ${E${fromext}})
exten => confmenu,n,GotoIf($["${E${fromext}}" = ""]?invalidnum:oknum)
exten => confmenu,n(invalidnum),Playback(invalid)
exten => confmenu,n,Wait(0.5)
exten => confmenu,n,Goto(nopw)
exten => confmenu,n(oknum),Set(CHANTOSPY=${E${fromext}})
exten => confmenu,n,Playback(zapbarge_grazie)
exten => confmenu,n(loopmain),Wait(0.5)
exten => confmenu,n,Noop
exten => confmenu,n,Read(RECRESULT|zapbarge_menu2|1|||4)
exten => confmenu,n,GotoIf($["x${RECRESULT}"="x1"]?chanrecord,1)
exten => confmenu,n,GotoIf($["x${RECRESULT}"="x2"]?channorecord,1)
exten => confmenu,n,GotoIf($["x${RECRESULT}"="x3"]?chaninfinite,1)
exten => confmenu,n,GotoIf($["x${RECRESULT}"="x4"]?chaninfiniterecord,1)
exten => confmenu,n,GotoIf($["x${RECRESULT}"="x5"]?confmenu,3)
exten => confmenu,n,Goto(loopmain)

exten => t,1,Hangup
exten => h,1,Hangup

; override incoming hours
[app-incominghours]
exten => *60,1,Answer
exten => *60,n,GotoIf($["${DAYNIGHT_PASSWORD}" = ""]?nopw:pw)
exten => *60,n(pw),Authenticate(${DAYNIGHT_PASSWORD})
exten => *60,n(nopw),Goto(incomingmenu,1)
		
exten => incomingswitch,1(loop),Wait(0.2)
exten => incomingswitch,n,Read(MENURESULT2|incominghours_menu2|1|||10)
exten => incomingswitch,n,GosubIf($["x${MENURESULT2}"="x1"]?incomingswitch_forcereghours,1)
exten => incomingswitch,n,GosubIf($["x${MENURESULT2}"="x2"]?incomingswitch_forceafthours,1)
exten => incomingswitch,n,GosubIf($["x${MENURESULT2}"="x3"]?incomingswitch_forceholiday,1)
exten => incomingswitch,n,GosubIf($["x${MENURESULT2}"="x4"]?incomingswitch_forcereset,1)
exten => incomingswitch,n,GosubIf($["x${MENURESULT2}"="x5"]?incomingmenu,loop)
exten => incomingswitch,n,GotoIf($["x${MENURESULT2}"="x6"]?incomingmenu_hangup,1)
exten => incomingswitch,n,Goto(loop)

exten => incomingswitch_forcereghours,1,Set(DB(IN_OVERRIDE_${MENURESULT}/INCOMING)=forcereghours)
exten => incomingswitch_forcereghours,n,Playback(incominghours_serviziogiorno)
exten => incomingswitch_forcereghours,n,Wait(0.2)
exten => incomingswitch_forcereghours,n,SayNumber(${MENURESULT})
exten => incomingswitch_forcereghours,n,Wait(0.2)
exten => incomingswitch_forcereghours,n,Playback(incominghours_abilitato)
exten => incomingswitch_forcereghours,n,Return

exten => incomingswitch_forcereset,1,DBdel(IN_OVERRIDE_${MENURESULT}/INCOMING)
exten => incomingswitch_forcereset,n,Playback(incominghours_servizioorari)
exten => incomingswitch_forcereset,n,Wait(0.2)
exten => incomingswitch_forcereset,n,SayNumber(${MENURESULT})
exten => incomingswitch_forcereset,n,Wait(0.2)
exten => incomingswitch_forcereset,n,Playback(incominghours_abilitato)
exten => incomingswitch_forcereset,n,Return

exten => incomingswitch_forceafthours,1,Set(DB(IN_OVERRIDE_${MENURESULT}/INCOMING)=forceafthours)
exten => incomingswitch_forceafthours,n,Playback(incominghours_servizionotte)
exten => incomingswitch_forceafthours,n,Wait(0.2)
exten => incomingswitch_forceafthours,n,SayNumber(${MENURESULT})
exten => incomingswitch_forceafthours,n,Wait(0.2)
exten => incomingswitch_forceafthours,n,Playback(incominghours_abilitato)
exten => incomingswitch_forceafthours,n,Return

exten => incomingswitch_forceholiday,1,Set(DB(IN_OVERRIDE_${MENURESULT}/INCOMING)=forceholiday)
exten => incomingswitch_forceholiday,n,Playback(incominghours_serviziovacanze)
exten => incomingswitch_forceholiday,n,Wait(0.2)
exten => incomingswitch_forceholiday,n,SayNumber(${MENURESULT})
exten => incomingswitch_forceholiday,n,Wait(0.2)
exten => incomingswitch_forceholiday,n,Playback(incominghours_abilitato)
exten => incomingswitch_forceholiday,n,Return

exten => incomingmenu_hangup,1,Hangup

exten => incomingmenu,1,Wait(0.5)
exten => incomingmenu,n,ControlPlayback(incominghours_welcome||||#||)
exten => incomingmenu,n(loop),Wait(0.2)
exten => incomingmenu,n,Read(MENURESULT|incominghours_menu|1|||10)
exten => incomingmenu,n,GotoIf($["x${MENURESULT}"="x1"]?incomingswitch,1)
exten => incomingmenu,n,GotoIf($["x${MENURESULT}"="x2"]?incomingswitch,1)
exten => incomingmenu,n,GotoIf($["x${MENURESULT}"="x3"]?incomingswitch,1)
exten => incomingmenu,n,GotoIf($["x${MENURESULT}"="x4"]?incomingswitch,1)
exten => incomingmenu,n,GotoIf($["x${MENURESULT}"="x5"]?incomingswitch,1)
exten => incomingmenu,n,GotoIf($["x${MENURESULT}"="x6"]?incomingswitch,1)
exten => incomingmenu,n,GotoIf($["x${MENURESULT}"="x7"]?review,1)
exten => incomingmenu,n,GotoIf($["x${MENURESULT}"="x8"]?incomingmenu_hangup,1)
exten => incomingmenu,n,Goto(loop)

exten => review,1,Set(i=1)
exten => review,n,While($[${i} < 7])
exten => review,n,Set(IN_OVERRIDE=${DB(IN_OVERRIDE_${i}/INCOMING)})
exten => review,n,GosubIf($["${IN_OVERRIDE}"=""]?voce_reset,1)
exten => review,n,GosubIf($["${IN_OVERRIDE}"="forceafthours"]?voce_forceafthours,1)
exten => review,n,GosubIf($["${IN_OVERRIDE}"="forcereghours"]?voce_forcereghours,1)
exten => review,n,GosubIf($["${IN_OVERRIDE}"="forceholiday"]?voce_forceholiday,1)
exten => review,n,Set(i=$[${i} + 1])
exten => review,n,EndWhile
exten => review,n,Goto(incomingmenu,loop)

exten => voce_reset,1,Playback(incominghours_servizioorari)
exten => voce_reset,n,Wait(0.3)
exten => voce_reset,n,SayNumber(${i})
exten => voce_reset,n,Wait(0.3)
exten => voce_reset,n,Playback(incominghours_abilitato)
exten => voce_reset,n,Return

exten => voce_forcereghours,1,Playback(incominghours_serviziogiorno)
exten => voce_forcereghours,n,Wait(0.3)
exten => voce_forcereghours,n,SayNumber(${i})
exten => voce_forcereghours,n,Wait(0.3)
exten => voce_forcereghours,n,Playback(incominghours_abilitato)
exten => voce_forcereghours,n,Return

exten => voce_forceafthours,1,Playback(incominghours_servizionotte)
exten => voce_forceafthours,n,Wait(0.3)
exten => voce_forceafthours,n,SayNumber(${i})
exten => voce_forceafthours,n,Wait(0.3)
exten => voce_forceafthours,n,Playback(incominghours_abilitato)
exten => voce_forceafthours,n,Return

exten => voce_forceholiday,1,Playback(incominghours_serviziovacanze)
exten => voce_forceholiday,n,Wait(0.3)
exten => voce_forceholiday,n,SayNumber(${i})
exten => voce_forceholiday,n,Wait(0.3)
exten => voce_forceholiday,n,Playback(incominghours_abilitato)
exten => voce_forceholiday,n,Return

exten => t,1,Hangup
exten => h,1,Hangup

[app-callforward-on-unavailable]

; dialed call forward on busy app - forwards calling extension when unavailable
exten => _*64.,1,Set(DB(CFU/${CALLERID(num)})=${EXTEN:3})
exten => _*64.,n,Answer
exten => _*64.,n,Wait(1)
exten => _*64.,n,Playback(trasferimento_chiamata_non_disp_dal_numero)
exten => _*64.,n,SayDigits(${CALLERID(num)})
exten => _*64.,n,Playback(trasferimento_chiamata_verso_numero)
exten => _*64.,n,SayDigits(${EXTEN:3})
exten => _*64.,n,Macro(hangupcall)

; cancels call forward on unavailable for calling extension
exten => *65,1,DBdel(CFU/${CALLERID(num)})
exten => *65,n,Answer
exten => *65,n,Wait(1)
exten => *65,n,Playback(trasferimento_chiamata_non_disp_disattivato)
exten => *65,n,Macro(hangupcall)

[app-calltrace]
; We can't have our timeouts or dial digits collide with other applications
; or extensions, so we build the app in pieces
exten => *69,1,Goto(app-calltrace-perform,s,1)

[app-calltrace-perform]
exten => s,1,Answer
exten => s,n,Wait(1)
exten => s,n,Playback(ultima_chiamata_ricevuta)
exten => s,n,Set(lastcaller=${DB(CALLTRACE/${CALLERID(num)})})
exten => s,n,GotoIf($[${lastcaller}]?disp:nodisp)
exten => s,n(disp),SayDigits(${lastcaller})
exten => s,n,Set(TIMEOUT(digit)=3)
exten => s,n,Set(TIMEOUT(response)=7)
exten => s,n,Background(chiama_premi_uno)
exten => s,n,Goto(exit)
exten => s,n(nodisp),Playback(non_disponibile)
exten => s,n,Macro(hangupcall)
exten => s,n(exit),NoOp
exten => 1,1,Goto(from-internal,${lastcaller},1)
exten => i,1,Playback(vm-goodbye)
exten => i,n,Macro(hangupcall)
exten => t,1,Playback(vm-goodbye)
exten => t,n,Macro(hangupcall)
exten => h,1,Hangup

[app-zapbarge]
exten => *92,1,GotoIf($["${ZAP_PASSWORD}" = ""]?notpw:pw)
exten => *92,n(pw),Authenticate(${ZAP_PASSWORD})
exten => *92,n(notpw),Set(GROUP()=${CALLERID(num)})
exten => *92,n,Answer
exten => *92,n,Wait(1)
exten => *92,n,ZapBarge
exten => *92,n,Hangup

[app-zapscan]
exten => *93,1,GotoIf($["${ZAP_PASSWORD}" = ""]?notpw:pw)
exten => *93,n(pw),Authenticate(${ZAP_PASSWORD})
exten => *93,n(notpw),Set(GROUP()=${CALLERID(num)})
exten => *93,n,Answer
exten => *93,n,Wait(1)
exten => *93,n,ZapScan
exten => *93,n,Hangup

[app-wakeup-call]
exten => *94,1,Answer
exten => *94,n,Set(CHANLANG=${CHANNEL(language)})
exten => *94,n,Noop(${CHANLANG})
exten => *94,n,GotoIf($["${CHANLANG}" = "it"]?it:en)
exten => *94,n(it),DeadAGI(wakeup.php)
exten => *94,n,Hangup
exten => *94,n(en),DeadAGI(wakeup_en.php)
exten => *94,n,Hangup

[app-zapbargeplus]
exten => *95,1,GotoIf($["${ZAP_PASSWORD}" = ""]?notpw:pw)
exten => *95,n(pw),Authenticate(${ZAP_PASSWORD})
exten => *95,n(notpw),Set(GROUP()=${CALLERID(num)})
exten => *95,n,Answer
exten => *95,n,Wait(1)
exten => *95,n,DeadAGI(zapbargeplus.agi)
exten => *95,n,Hangup

[app-pickup]
exten => _**.,1,Noop(Attempt to Pickup ${EXTEN:2} by ${CALLERID(num)})
exten => _**.,n,Pickup(${EXTEN:2}@PICKUPMARK)
exten => _**.,n,Hangup

; ############################################################################
; Inbound Contexts [from]
; ############################################################################

[from-sip-external]

exten => _X.,1,NoOp(Received incoming SIP connection from unknown peer to ${EXTEN})
exten => _X.,n,Set(DID=${IF($["${EXTEN:1:2}"=""]?s:${EXTEN})})
exten => _X.,n,Goto(s,1)
exten => s,1,Ringing
exten => s,n,GotoIf($["${ALLOW_SIP_ANON}"="yes"]?from-trunk,${DID},1)
exten => s,n,Set(TIMEOUT(absolute)=15)
exten => s,n,Answer
exten => s,n,Wait(2)
exten => s,n,Playback(ss-noservice)
exten => s,n,Playtones(congestion)
exten => s,n,Congestion(5)
exten => h,1,NoOp(Hangup)
exten => h,n,Hangup
exten => i,1,NoOp(Invalid)
exten => i,n,Hangup
exten => t,1,NoOp(Timeout)
exten => t,n,Hangup

[from-internal]

include => app-directory
include => app-dnd
include => app-segreteria
include => app-ora_esatta
include => app-monitor
include => app-callforward
include => app-callforward-on-busy
include => app-callforward-on-unavailable
include => app-callwaiting
include => app-messagecenter
include => app-calltrace
include => app-zapbarge
include => app-zapscan
include => app-wakeup-call
include => app-zapbargeplus
include => app-echotest
include => app-speakextennum
include => app-chanspy
include => app-incominghours
include => app-rob-robauto
include => parkedcalls
include => app-pickup
include => from-internal-custom
include => from-internal-custom-additional
include => custom-speeddial
include => custom-simultone

                                                                                            ;allow phones to dial other extensions

include => ext-fax
include => ext-local
include => ext-group
include => ext-queues
include => ext-meetme
include => ext-record
include => ext-test
include => native-fax
include => ext-miscdests

                                                                                            ;allow phones to access trunks
include => outbound-allroutes
include => bad-number
exten => s,1,Macro(hangupcall)
exten => h,1,Macro(hangupcall)

[ext-local-dest]
include => ext-local
include => outbound-allroutes

; ############################################################################
; Extension Contexts [ext]
; ############################################################################

[bad-number]
exten => _X.,1,Wait(1)
exten => _X.,n,Playback(invalid)
exten => _X.,n,Wait(1)
exten => _X.,n,Congestion(20)
exten => _X.,n,Hangup()

exten => _*.,1,Wait(1)
exten => _*.,n,Playback(invalid)
exten => _*.,n,Wait(1)
exten => _*.,n,Congestion(20)
exten => _*.,n,Hangup()

[from-zaptel]
exten => _X.,1,Set(DID=${EXTEN})
exten => _X.,n,Goto(s,1)
exten => s,1,NoOp(Entering from-zaptel with DID == ${DID})                              ; Some trunks _require_ a RINGING be sent before an Answer.
exten => s,n,Ringing()                                                                  ; If ($did == "") { $did = "s"; }
exten => s,n,Set(DID=${IF($["${DID}"= ""]?s:${DID})})
exten => s,n,NoOp(DID is now ${DID})
exten => s,n,GotoIf($["${CHANNEL:0:3}"="Zap"]?zapok:notzap)
exten => s,n(notzap),Goto(ext-did,${DID},1)                                             ; If there's no ext-did,s,1, that means there's not a no did/no cid route. Hangup.
exten => s,n,Macro(hangupcall)
exten => s,n(zapok),NoOp(Is a Zaptel Channel)
exten => s,n,Set(CHAN=${CHANNEL:4})
exten => s,n,Set(CHAN=${CUT(CHAN,-,1)})
exten => s,n,Macro(from-zaptel-${CHAN},${DID},1)                                        ; If nothing there, then treat it as a DID
exten => s,n,NoOp(Returned from Macro from-zaptel-${CHAN})
exten => s,n,Goto(ext-did,${DID},1)
exten => fax,1,Goto(ext-fax,in_fax,1)

[native-fax]
exten => s,1,Answer
exten => s,n,Goto(in_fax,1)
exten => in_fax,1,Macro(faxreceive)
exten => in_fax,n,Hangup
exten => h,1,Set(CHANLANG=${CHANNEL(language)})
exten => h,n,Noop(${CHANLANG})
exten => h,n,GotoIf($["${CHANLANG}" = "it"]?it:en)
exten => h,n(it),system(/var/lib/asterisk/bin/fax-process.pl --to ${EMAILADDR}%${EMAILADDR2} --from ${FAX_RX_FROM} --subject "Hai ricevuto un fax dal numero di telefono ${URIENCODE(${CALLERID(num)})} ${URIENCODE(${CALLERID(name)})}" --attachment "VOIPER_FAX_GATEWAY_${URIENCODE(${CALLERID(num)})}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}.pdf" --type application/pdf --file ${FAXFILE})
exten => h,n,Hangup
exten => h,n(en),system(/var/lib/asterisk/bin/fax-process.pl --to ${EMAILADDR}%${EMAILADDR2} --from ${FAX_RX_FROM} --subject "You received a fax from phone number ${URIENCODE(${CALLERID(num)})} ${URIENCODE(${CALLERID(name)})}" --attachment "VOIPER_FAX_GATEWAY_${URIENCODE(${CALLERID(num)})}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}.pdf" --type application/pdf --file ${FAXFILE})
exten => h,n,Hangup

[ext-fax]
exten => s,1,Answer
exten => s,n,Goto(in_fax,1)
exten => in_fax,1,StopPlayTones
exten => in_fax,n,GotoIf($["${FAX_RX}" = "system"]?digital_fax:analog_fax,1)
exten => in_fax,n(digital_fax),Macro(faxreceive)
exten => in_fax,n,Hangup
exten => analog_fax,1,GotoIf($["${FAX_RX}" = "disabled"]?hangupfax:dialfax)                               ;if fax is disabled, just hang up
exten => analog_fax,n(dialfax),Dial(${FAX_RX},20)
exten => analog_fax,n(hangupfax),Hangup
exten => out_fax,1,txfax(${TXFAX_NAME}|caller)
exten => out_fax,n,Hangup
exten => h,1,Set(CHANLANG=${CHANNEL(language)})
exten => h,n,Noop(${CHANLANG})
exten => h,n,GotoIf($["${CHANLANG}" = "it"]?it:en)
exten => h,n(it),system(/var/lib/asterisk/bin/fax-process.pl --to ${EMAILADDR}%${EMAILADDR2} --from ${FAX_RX_FROM} --subject "Hai ricevuto un fax dal numero di telefono ${URIENCODE(${CALLERID(num)})} ${URIENCODE(${CALLERID(name)})}" --attachment "VOIPER_FAX_GATEWAY_${URIENCODE(${CALLERID(num)})}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}.pdf" --type application/pdf --file ${FAXFILE})
exten => h,n,Hangup
exten => h,n(en),system(/var/lib/asterisk/bin/fax-process.pl --to ${EMAILADDR}%${EMAILADDR2} --from ${FAX_RX_FROM} --subject "You received a fax from phone number ${URIENCODE(${CALLERID(num)})} ${URIENCODE(${CALLERID(name)})}" --attachment "VOIPER_FAX_GATEWAY_${URIENCODE(${CALLERID(num)})}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}.pdf" --type application/pdf --file ${FAXFILE})
exten => h,n,Hangup

[ext-record]
exten => *77,1,Playback(iniziare_messaggio)
exten => *77,n,Record(${CALLERID(num)}ivrrecording:wav)
exten => *77,n,Playback(grazie)
exten => *77,n,Hangup

exten => *99,1,Playback(${CALLERID(num)}ivrrecording)
exten => *99,n,Hangup
                                                                                            ;this is where parked calls go if they time-out.  Should probably re-ring
[default]
include => ext-local
exten => s,1,Playback(vm-goodbye)
exten => s,n,Macro(hangupcall)

[ext-test]
exten => 666,1,Set(FAX_RX=system)
exten => 666,n,Wait(2)
exten => 666,n,Goto(ext-fax,s,1)

exten => 7771,1,Goto(from-pstn-timecheck,s,1)
exten => 7772,1,Goto(from-pstn-timecheck_1,s,1)
exten => 7773,1,Goto(from-pstn-timecheck_2,s,1)
exten => 7774,1,Goto(from-pstn-timecheck_3,s,1)
exten => 7775,1,Goto(from-pstn-timecheck_4,s,1)
exten => 7776,1,Goto(from-pstn-timecheck_5,s,1)

exten => h,1,Macro(hangupcall)

[callback]
exten => s,1,Noop(calleridnum: ${CALLERID(num)})
exten => s,n,Noop(cb_trunk: ${CB_TRUNK})
exten => s,n,Set(pre_num=${CUT(${CB_TRUNK},$,1)})
exten => s,n,Set(the_num=${CUT(${CB_TRUNK},$,2)})
exten => s,n,Set(post_num=${CUT(${CB_TRUNK},$,3)})
exten => s,n,GotoIf($["${the_num}" = "OUTNUM"]?trunk2:trunk1)
exten => s,n(trunk1),Set(CB_TRUNK_FIX=${${CB_TRUNK}})
exten => s,n,Goto(skip)
exten => s,n(trunk2),Set(CB_TRUNK_FIX=${pre_num:4}${post_num})
exten => s,n(skip),Noop()
exten => h,1,DeadAGI(callback.agi,${CB_TRUNK_FIX},${CALLERID(num)})

[callbackext]
exten => s,1,GotoIf($["${CALLBACKEXT_PASSWORD}" = ""]?nopw:pw)
exten => s,n(pw),Authenticate(${CALLBACKEXT_PASSWORD})
exten => s,n(loop),Read(NUM2CALL,richiamata_automatica||||4)
exten => s,n,GotoIf($["${NUM2CALL}" = ""]?loop:oknum)
exten => s,n(oknum),Playback(auth-thankyou)
exten => s,n,Noop(num2call: ${NUM2CALL})
exten => s,n,Noop(cb_trunk: ${CB_TRUNK})
exten => s,n,Set(pre_num=${CUT(${CB_TRUNK},$,1)})
exten => s,n,Set(the_num=${CUT(${CB_TRUNK},$,2)})
exten => s,n,Set(post_num=${CUT(${CB_TRUNK},$,3)})
exten => s,n,GotoIf($["${the_num}" = "OUTNUM"]?trunk2:trunk1)
exten => s,n(trunk1),Set(CB_TRUNK_FIX=${${CB_TRUNK}})
exten => s,n,Goto(skip)
exten => s,n(trunk2),Set(CB_TRUNK_FIX=${pre_num:4}${NUM2CALL})
exten => s,n(skip),DeadAGI(callback_ext.agi,${CB_TRUNK_FIX},${NUM2CALL})
exten => s,n(nopw),Hangup

[callbackmacro]
exten => s,1,Macro(tono_simulato,,ext-local-dest,,dialus)
exten => s,n,Hangup

[macro-apprecord]
exten => s,1,GotoIf($["${CHECKREC}" = "0" | "${CHECKREC}" = ""]?startrec:stoprec)
exten => s,n(startrec),Playback(monitor_attivato)
exten => s,n,Set(CHECKREC=1)
exten => s,n,Set(CALLFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-OUT${CALLERID(num)}-${NUMERO_DIAL}-^-${STRFTIME(${EPOCH},,%Y%m%d%H%M%S)}-${UNIQUEID})
exten => s,n,GotoIf($["${WAV2MP3}" = "enabled"]?okmp3:nomp3)
exten => s,n(okmp3),Set(MP3_CONVERSION=nice -n 19 lame --preset voice -v -b 96 -a "/var/spool/asterisk/monitor/${CALLFILENAME}.wav" "/var/spool/asterisk/monitor/${CALLFILENAME}.mp3" && rm -f "/var/spool/asterisk/monitor/${CALLFILENAME}.wav")
exten => s,n(nomp3),MixMonitor(${CALLFILENAME}.wav||${MP3_CONVERSION})
exten => s,n,SetCDRUserField(${CALLFILENAME})
exten => s,n,MacroExit
exten => s,n(stoprec),StopMixMonitor
exten => s,n,Set(CHECKREC=0)
exten => s,n,Playback(monitor_disattivato)
exten => s,n,MacroExit

[macro-recallonbusy]
exten => s,1,GotoIf($[$[${LEN(${CALLERID(num)})} > 2] & $[${LEN(${CALLERID(num)})} < 5] & $[${DB_EXISTS(ROBCHECK/${EXTTOCALL})}]]?ok:nok)
exten => s,n(nok),MacroExit
exten => s,n(ok),Answer
exten => s,n,Playtones(busy)
exten => s,n,Wait(1)
exten => s,n,DeadAGI(recallonbusy/recallonbusy.agi)
exten => s,n,Hangup

exten => T,1,Hangup
exten => t,1,Hangup
exten => h,1,Hangup

[macro-recallauto]
exten => s,1,GotoIf($[$[${LEN(${CALLERID(num)})} > 2] & $[${LEN(${CALLERID(num)})} < 5] & $[${DB_EXISTS(ROBCHECK/${EXTTOCALL})}]]?ok:nok)
exten => s,n(nok),MacroExit
exten => s,n(ok),Answer
exten => s,n,Wait(1)
exten => s,n,DeadAGI(recallauto/recallauto.agi)

exten => T,1,MacroExit

[recallonbusy-dial]
exten => s,1,Set(ROBCIDNUM_DEST=${rob_cidnum_dest})
exten => s,n,Set(ROBCIDNAME_DEST=${rob_cidname_dest})
exten => s,n,Set(ROBCIDNUM_SOURCE=${rob_cidnum_source})
exten => s,n,Set(CALLERID(all)=${ROBCIDNAME_DEST} ${ROBCIDNUM_DEST})
exten => s,n,DBdel(ROB/${ROBCIDNUM_SOURCE})
exten => s,n,Dial(Local/${ROBCIDNUM_SOURCE}@from-internal)
exten => s,n,Hangup

[macro-inboundphonebook]
; todo: replace localhost with the ip of the mysql server (Voiper Enterprise Cluster)
exten => s,1,GotoIf($["${CALLERID(num)}" = ""]?nocid)
exten => s,n,Mysql(Connect connid localhost asteriskuser amp109 phonebook)
exten => s,n,GotoIf($["${connid}" = ""]?dberror)
exten => s,n,Mysql(Query resultid ${connid} SELECT\ description\ FROM\ phonebook\ WHERE\ number = ${CALLERID(num)})
exten => s,n,Mysql(Fetch fetchid ${resultid} description)
exten => s,n,GotoIf($["${description}" = ""]?notfound)
exten => s,n,Set(CALLERID(name)=${description})
exten => s,n,Mysql(Clear ${resultid})
exten => s,n,Mysql(Disconnect ${connid})
exten => s,n,MacroExit
exten => s,n(notfound),GotoIf($["${CALLERID(name)}" != "" & "${FROM_DID}" != ""]?exit)
exten => s,n,Set(CALLERID(name)=Unknown)
exten => s,n(exit),Mysql(Clear ${resultid})
exten => s,n,Mysql(Disconnect ${connid})
exten => s,n,MacroExit
exten => s,n(dberror),NoOp(macro-inboundphonebook: Errore di connessione al Database)
exten => s,n,MacroExit
exten => s,n(nocid),NoOp(macro-inboundphonebook: cid number not found)
exten => s,n,MacroExit

